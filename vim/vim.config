""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" : plugin
"
    " bootstrap
    let autoload_plug_path = stdpath('data') . '/site/autoload/plug.vim'
    if !filereadable(autoload_plug_path)
      silent execute '!curl -fLo ' . autoload_plug_path . '  --create-dirs 
          \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    unlet autoload_plug_path
    
    " Specify a dir for plugins
    call plug#begin('~/.local/share/nvim/plugged')

    " easy motion w/ visual assistents
    Plug 'easymotion/vim-easymotion'

    " colorschemes
    Plug 'morhetz/gruvbox'

    " show indent guide bars to visualize indent levels
    " https://github.com/Yggdroot/indentLine
    Plug 'nathanaelkane/vim-indent-guides'

    " better status line
    " https://github.com/itchyny/lightline.vim
    Plug 'itchyny/lightline.vim'

    " THE git plugin
    " https://github.com/tpope/vim-fugitive
    Plug 'tpope/vim-fugitive'

    " THE git plugin
    " https://github.com/kien/rainbow_parentheses.vim
    Plug 'kien/rainbow_parentheses.vim'

    " vcs marker
    " https://github.com/mhinz/vim-signify
    Plug 'mhinz/vim-signify'

    " navigating files
    " https://github.com/scrooloose/nerdtree
    Plug 'scrooloose/nerdtree'
    Plug 'Xuyuanp/nerdtree-git-plugin'

    " file finder
    " https://github.com/scrooloose/nerdtree
    Plug 'junegunn/fzf', { 'dir': '~/.local/share/fzf', 'do': './install --all' }

    " Initialize plugin system
    call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" : general
"
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: tabbing
        set expandtab " insert spaces whenever the tab key is pressed
        set tabstop=4
        set shiftwidth=4 " numbers of spaces inserted for indentation
        set list " show all white spaces as char
        " change all tabs in the current line to match tab settings
        map <Leader><Tab> :.retab<CR>
        " change all tabs to match tab settings
        map <Leader><S-Tab> :retab<CR>

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: undo
        if has('persistent_undo')
            set undolevels=1000
        endif

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: other
        set showmatch " show matching bracets when text indicator is over them

        set history=1000 " keep 1000 lines fo command line history

        " sounds
        set noerrorbells
        set novisualbell

        " auto trim tailing whitespaces on save
        augroup onExit
            autocmd!
            autocmd FileType vim,c,cpp,java,php,pl,sh autocmd BufWritePre <buffer> %s/\s\+$//e
        augroup END

        " autoreload vimrc changes and reload
        if has ('autocmd') " Remain compatible with earlier versions
         augroup vimrc     " Source vim configuration upon save
            autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
            autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
          augroup END
        endif " has autocmd


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" : key mappings
"
    let mapleader = ","

    " yank to the line end (behave like other capital commands)
    nnoremap Y y$

    " create newlines w/o entering insert mode
    nnoremap go o<Esc>k
    nnoremap gO O<Esc>j

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: moving
        " movement by screen line instead of file line (for text wrap)
        nnoremap <silent> j gj
        nnoremap <silent> <down> gj
        nnoremap <silent> <C-j> 20gjzz
        nnoremap <silent> <C-down> 20gjzz
        nnoremap <silent> k gk
        nnoremap <silent> <up> gk
        nnoremap <silent> <C-k> 20gkzz
        nnoremap <silent> <C-up> 20gkzz
        nnoremap <silent> 0 g0
        nnoremap <silent> $ g$

        " move to next empty line
        nnoremap <A-j> }
        " move to next empty line
        nnoremap <A-k> {

        " Plug: easymotion: fast motion by typing the activation letter: s
        let g:EasyMotion_do_mapping = 0
        let g:EasyMotion_smartcase = 1
        nmap ss <Plug>(easymotion-s2)
        nmap sd <Plug>(easymotion-s)
        nmap sf <Plug>(easymotion-overwin-f)
        map  sh <Plug>(easymotion-linebackward)
        map  sl <Plug>(easymotion-lineforward)
        map  sj <Plug>(easymotion-j)
        map  sk <Plug>(easymotion-k)
        map  s/ <Plug>(easymotion-sn)
        omap s/ <Plug>(easymotion-tn)
        map  sn <Plug>(easymotion-next)
        map  sp <Plug>(easymotion-prev)

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: searching
        " highlight search word under cursor w/o jumping to the next AND move
        " to word start, for search-and-replace dingens
        nnoremap <Leader>* *<C-O>heb

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: signify
        nmap <Leader>n <Plug>(signify-next-hunk)
        nmap <Leader><S-n> <Plug>(signify-prev-hunk)

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: nerdtree
        " auto open nerdtree, when vim is started w/o a file specified
        map <Leader>f :NERDTreeFind<CR>
        map <Leader>F :NERDTreeToggle<CR>
        au StdinReadPre * let s: std_in=1
        au VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

        " automatically close NerdTree when you open a file
        let NERDTreeQuitOnOpen = 1
        " automatically dekete the buffer of the file you just deleted w/ NerdTree
        let NERDTreeAutoDeleteBuffer = 1
        " make NerdTree prettier
        let NERDTreeMinimalUI = 1
        let NERDTreeDirArrows = 1

        " automatically close a tab if the only remaining window is nerdtree
        au bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

    """"""""""""""""""""""""""""""""""""""""""""""""""""
    " :: other
        " toggle background color mode
        map <Leader>bg :let &background=( &background == "dark" ? "light" : "dark" )<CR><CR>

        set wrap
        nnoremap <silent> <Leader>w :set wrap!<CR>

        " underline current line with '-'
        nnoremap <Leader>ul :t.\|s/./-/g\|:nohls<CR>
        " underline current line with '='
        nnoremap <leader>uul :t.\|s/./=/g\|:nohls<CR>

        " duplicate lines - similar to intellij
        function! <SID>duplicateLine_moveLineAndKeepCursorCol()
            let l = line(".")
            let c = col(".")

            normal! Yp

            call cursor(l, c)

            normal! j
        endfun
        nnoremap <C-d> :call <SID>duplicateLine_moveLineAndKeepCursorCol()<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" : ui zeuch
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: colorscheme-rotz (settings for 'morhetz/gruvbox' scheme)
        set background=dark " start w/ this mode
        "set background=light

        let g:gruvbox_contrast_dark='medium'  " set contrast for dark mode 'hard | ... | soft'
        let g:gruvbox_contrast_light='soft' " set contrast for light mode 'hard | medium | ...'

        let g:gruvbox_italic='1'

        " toggle highlighted search color
        map <Leader>/ :call gruvbox#hls_toggle()<CR>

        colorscheme gruvbox

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: statusline
        " Plug: lightline
        set laststatus=2
        let g:lightline = {
            \ 'colorscheme': 'wombat',
            \ 'active': {
            \   'left': [  [ 'mode', 'paste' ],
            \              [ 'bufnum', 'gitbranch', 'readonly', 'filename', 'modified' ] ],
            \   'right': [ [ 'lineinfo' ],
            \              [ 'percent' ],
            \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ]
            \ },
            \ 'component': {
            \   'charvaluehex': '0x%02B'
            \ },
            \ 'component_function': {
            \   'gitbranch': 'fugitive#head'
            \ },
            \ }

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: better rainbow parenthesis
        let g:rbpt_colorpairs = [
            \ [ 'brown',      'RoyalBlue3' ],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]
        let g:rbpt_max = 16
        let g:rbpt_ladcmd_toggle = 0

        au VimEnter * RainbowParenthesesToggle " toggle it on
        au Syntax * RainbowParenthesesLoadRound " ()
        au Syntax * RainbowParenthesesLoadSquare " []
        au Syntax * RainbowParenthesesLoadBraces " {}
        au Syntax * RainbowParenthesesLoadChevrons " <>

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""
    " :: other
        " both absolute and relative line numbers are enabled by default, which produces “hybrid” line numbers.
        " When entering insert mode, relative line numbers are turned off, leaving absolute line numbers turned on.
        " This also happens when the buffer loses focus, so you can glance back at it to see which absolute line
        " you were working on if you need to.
        set number relativenumber " show relative line numbers
        augroup numbertoggle
            autocmd!
            autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
            autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
        augroup END

        " Plug: indentLines
        let g:indent_guides_enable_on_vim_startup = 1
        let g:indent_guides_guide_size = 1

